@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TrustWaveCarca</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                @if (!context.User.IsInRole("Admin"))
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                            <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                        </NavLink>
                    </div>

                    @*  <div class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
                </NavLink>
                </div> *@
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="auth">
                            <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Auth Required
                        </NavLink>
                    </div>

                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="weather">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
                        </NavLink>
                    </div>

                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Manage">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                        </NavLink>
                    </div>


                    <div class="nav-item px-3">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="nav-link">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                            </button>
                        </form>
                    </div>

                }

                
        
                @if (context.User.IsInRole("Admin")) 
                {
                   
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="AdminDash">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Admin Dash
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                        <NavLink class="nav-link" href="UserCredentials">
                            <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> User Credentials
                    </NavLink>  
                </div>
                <div class="nav-item px-3">
                        <NavLink class="nav-link" href="user-login-data">
                            <span class="bi bi-person-badge-nav-menu " aria-hidden="true"></span> User Manage 
                    </NavLink>  
                </div>


                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div> 


                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>

                }
            </Authorized>

            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private bool IsAdmin = false;
    private bool IsUser = false;

    protected override async void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Console.WriteLine("Is User Authenticated: " + user.Identity?.IsAuthenticated);

        if (user.Identity?.IsAuthenticated == true)
        {
            // Output all claims for debugging
            foreach (var claim in user.Claims)
            {
                Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
            }

            IsAdmin = user.IsInRole("Admin");
            IsUser = user.IsInRole("User");

            Console.WriteLine("IsAdmin: " + IsAdmin);
            Console.WriteLine("IsUser: " + IsUser);
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }

       
    
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

