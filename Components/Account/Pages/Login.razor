@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using TrustWaveCarca.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

@attribute [AllowAnonymous]

<PageTitle>Log in</PageTitle>


<div class="container vh-80 d-flex justify-content-center align-items-center mt-3">
    <div class="row w-100 justify-content-center">
        <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-4">
            <section class="card p-4 shadow">
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="inputform">
                    <DataAnnotationsValidator />
                    <div class="text-center mb-3">
                        <p>
                            <a href="/Account/LoginId" class="btn btn-secondary btn-lg w-100">Login with Unique ID</a>
                        </p>
                    </div>
                    <p class="text-danger text-center fs-6">Sign in through login ID for quick login</p>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control rounded-pill" autocomplete="username" aria-required="true" placeholder="name@example.com" id="email" />
                        <label for="email">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control rounded-pill" autocomplete="current-password" aria-required="true" placeholder="password" id="password" />
                        <label for="password">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                        <label class="form-check-label" for="rememberMe">Remember me</label>
                    </div>

                    <div class="text-center">
                        <button type="submit" class="btnbgcolor btn-lg w-100 rounded-pill">Sign in</button>
                    </div>

                    <div class="mt-3 text-center">
                        <p><a href="Account/ForgotPassword" class="text-secondary">Forgot your password?</a></p>
                        <p>
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-secondary">Register as a new user</a>
                        </p>
                        <p><a href="Account/ResendEmailConfirmation" class="text-secondary">Resend email confirmation</a></p>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
</div>

@code {
    private bool loginByUniqueId = false;

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            var user = await UserManager.FindByNameAsync(Input.Email);
            if (user != null)
            {
                user.LastLoginTime = DateTime.UtcNow;
                await UserManager.UpdateAsync(user);
            }

            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }

    }
    public void NavigateToLoginId()
    {
        NavigationManager.NavigateTo("/Account/LoginId");
        Console.WriteLine("click");
    }
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }

     
        //public string? UniqueId { get; set; } // For unique ID login

    }
}
