@page "/Account/Loginid"

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using TrustWaveCarca.Data
@using Microsoft.AspNetCore.Authentication
@using System.ComponentModel.DataAnnotations
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@attribute [AllowAnonymous]

<PageTitle>Log in</PageTitle>

<div class="container vh-80 d-flex justify-content-center align-items-center mt-3">
    <div class="row w-100">
        <div class="col-md-4 mx-auto">
            <section class="card p-4 shadow-lg">
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="inputform">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="text-center mb-3">
                        <p><a href="/Account/Login" class="btn btn-secondary">Login With Email</a></p>
                    </div>
                    <hr />

                    <!-- UniqueId input -->
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.UniqueId" class="form-control rounded-pill" autocomplete="username" placeholder="Enter Unique ID" @oninput="ConvertToUpper" />
                        <label for="uniqueId">Unique ID</label>
                        <ValidationMessage For="() => Input.UniqueId" class="text-danger" />
                    </div>

                    <div class="justify-content-center text-center">
                        <button type="submit" class="btn btn-primary btn-lg w-75 rounded-pill">Sign In</button>
                    </div>

                    <div class="mt-3 text-center">
                        <p><a href="Account/ForgotPassword" class="text-secondary">Forgot your password?</a></p>
                        <p><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-secondary">Register as a new user</a></p>
                        <p><a href="Account/ResendEmailConfirmation" class="text-secondary">Resend email confirmation</a></p>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // Check if UniqueId is provided
        if (string.IsNullOrEmpty(Input.UniqueId))
        {
            errorMessage = "Unique ID is required.";
            return;
        }
       
        // Attempt to find the user by UniqueId
        var userCredentials = await DbContext.UserLoginCredentials
                                             .FirstOrDefaultAsync(uc => uc.UniqueLoginID == Input.UniqueId);

        if (userCredentials == null)
        {
            errorMessage = "Invalid Unique ID.";
            return;
        }

        var user = await UserManager.FindByEmailAsync(userCredentials.Email); // Retrieve user by email
        if (user == null)
        {
            errorMessage = "No associated user found for this Unique ID.";
            return;
        }

        // Perform the sign-in process using the UniqueId (No password required)
        Task result = SignInManager.SignInAsync(user, Input.RememberMe);
        await result;


        if (result.IsCompletedSuccessfully)
        {
            Logger.LogInformation("User logged in.");

            // Add login record to UserLogins table
            var loginRecord = new UserLoginLoges
                {
                    UniqueId = Input.UniqueId,
                    IpAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "Unknown",
                    LoginTime = DateTime.UtcNow
                };
            DbContext.LoginLoges.Add(loginRecord);
            await DbContext.SaveChangesAsync();

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }
    private void ConvertToUpper(ChangeEventArgs e)
    {
        // Convert the input to uppercase
        Input.UniqueId = e?.Value?.ToString()?.ToUpper();
    }
    private sealed class InputModel
    {
        [Required(ErrorMessage = "Unique ID is required")]
        public string? UniqueId { get; set; }

        public bool RememberMe { get; set; }
    }
}
