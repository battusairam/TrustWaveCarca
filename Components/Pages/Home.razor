@page "/"

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@* @inject UIStateService UIStateService *@
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.IdentityModel.Tokens
@using TrustWaveCarca.Data
@using TrustWaveCarca.Components.Account.Pages.User
@using TrustWaveCarca.Reusable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Dbcontext
@inject Partnerchat partnerchat
<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="text-end mb-4">
            @if (credentials != null)
            {
                <h3>
                    <span class="bgcolor text-white" style="padding:4px; border-radius:3%;">ID: <span class="text-white">@credentials.UniqueLoginID</span></span>
                </h3>
            }
            else
            {
                <p>No credentials found for this user.</p>
            }
        </div>
        <div class="row">
            <!-- Left Side -->
            <div class="col-5 gap-3">
                <Chatsendrequest />
                <Chatacceptrequest />
            </div>
            <!-- Right Side -->
            <div class="col-5 offset-1">
                <Partnerchat />
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div style="
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 10vh;
        background-color: #f8f9fa;
        padding: 20px;">
            <h3 style="
            text-align: center;
                background: linear-gradient(120deg, #6a11cb, #2575fc);
            color: white;
            padding: 20px;
            border-radius: 10px;
            font-family: Arial, sans-serif;
            font-size: 2rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                Welcome to TrustwaveCarca!
            </h3>
            <p class="mb-3" style="
            margin-top: 20px;
            font-size: 1rem;
            color: #6c757d;
            font-family: Arial, sans-serif;">
                Don’t have an account?
                <a href="@RegisterPath" class="btn btn-link text-decoration-none" style="
                color: green;
                font-weight: bold;
                text-decoration: none;">
                    Register
                </a>
            </p>
            <p style="
            font-size: 1rem;
            color: #6c757d;
            font-family: Arial, sans-serif;">
                Already a member?
                <a href="@LoginPath" class="btn btn-sm" style="
                background-color: blue;
                color: #fff;
                font-weight: bold;
                padding: 6px 12px;
                border-radius: 5px;
                text-decoration: none;">
                    Login
                </a>
                to access your account.
            </p>
        </div>
    </NotAuthorized>

</AuthorizeView>

@code {
    private string LoginPath => NavigationManager.ToAbsoluteUri("/Account/Login").ToString();
    private string RegisterPath => NavigationManager.ToAbsoluteUri("/Account/Register").ToString();
    private UserLoginCredentials? credentials { get; set; }
    private string? currentuser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userName = authState.User;
            currentuser = userName.Identity?.Name;

            if (string.IsNullOrEmpty(currentuser))
            {
                Console.WriteLine("No user is authenticated.");
                return;
            }

            // Create a new DbContext instance
            await using var dbContext = DbContextFactory.CreateDbContext();

            credentials = await dbContext.UserLoginCredentials
                                          .FirstOrDefaultAsync(e => e.Email == currentuser);

            if (credentials == null)
            {
                Console.WriteLine($"No credentials found for user: {currentuser}");
            }
           // UIStateService.OnStateChange += StateHasChanged;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
    }
    // public void Dispose()
    // {
    //     UIStateService.OnStateChange -= StateHasChanged;
    // }
}
